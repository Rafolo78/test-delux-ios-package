// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name FirebaseInAppMessaging
@_exported import FirebaseInAppMessaging
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13, tvOS 13, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SwiftUI.View {
  public func imageOnlyInAppMessage<Content>(closure: @escaping (FirebaseInAppMessaging.InAppMessagingImageOnlyDisplay, any FirebaseInAppMessaging.InAppMessagingDisplayDelegate) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 13, tvOS 13, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SwiftUI.View {
  public func bannerInAppMessage<Content>(closure: @escaping (FirebaseInAppMessaging.InAppMessagingBannerDisplay, any FirebaseInAppMessaging.InAppMessagingDisplayDelegate) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 13, tvOS 13, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SwiftUI.View {
  public func modalInAppMessage<Content>(closure: @escaping (FirebaseInAppMessaging.InAppMessagingModalDisplay, any FirebaseInAppMessaging.InAppMessagingDisplayDelegate) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 13, tvOS 13, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SwiftUI.View {
  public func cardInAppMessage<Content>(closure: @escaping (FirebaseInAppMessaging.InAppMessagingCardDisplay, any FirebaseInAppMessaging.InAppMessagingDisplayDelegate) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
public enum InAppMessagingPreviewHelpers {
  public static func cardMessage(campaignName: Swift.String = "Card message campaign", title: Swift.String = "Title for modal message", body: Swift.String? = "Body for modal message", textColor: UIKit.UIColor = UIColor.label, backgroundColor: UIKit.UIColor = UIColor.black, portraitImage: UIKit.UIImage = UIImage(systemName: "rectangle")!, landscapeImage: UIKit.UIImage? = UIImage(systemName: "square"), primaryButtonText: Swift.String = "Click me!", primaryButtonTextColor: UIKit.UIColor = UIColor.systemBlue, primaryButtonBackgroundColor: UIKit.UIColor = UIColor.systemGray, primaryActionURL: Foundation.URL? = nil, secondaryButtonText: Swift.String? = "Dismiss", secondaryButtonTextColor: UIKit.UIColor? = UIColor.secondaryLabel, secondaryButtonBackgroundColor: UIKit.UIColor? = UIColor.systemYellow, secondaryActionURL: Foundation.URL? = nil, appData: [Swift.String : Swift.String]? = nil) -> FirebaseInAppMessaging.InAppMessagingCardDisplay
  public static func modalMessage(campaignName: Swift.String = "Modal message campaign", title: Swift.String = "Title for modal message", body: Swift.String? = "Body for modal message", textColor: UIKit.UIColor = UIColor.black, backgroundColor: UIKit.UIColor = UIColor.white, image: UIKit.UIImage? = UIImage(systemName: "rectangle"), buttonText: Swift.String? = "Click me!", buttonTextColor: UIKit.UIColor? = UIColor.systemBlue, buttonBackgroundColor: UIKit.UIColor? = UIColor
                                    .white, actionURL: Foundation.URL? = nil, appData: [Swift.String : Swift.String]? = nil) -> FirebaseInAppMessaging.InAppMessagingModalDisplay
  public static func bannerMessage(campaignName: Swift.String = "Banner message campaign", title: Swift.String = "Title for banner message", body: Swift.String? = "Body for banner message", textColor: UIKit.UIColor = UIColor.black, backgroundColor: UIKit.UIColor = UIColor.white, image: UIKit.UIImage? = UIImage(systemName: "square"), actionURL: Foundation.URL? = nil, appData: [Swift.String : Swift.String]? = nil) -> FirebaseInAppMessaging.InAppMessagingBannerDisplay
  public static func imageOnlyMessage(campaignName: Swift.String = "Image-only message campaign", image: UIKit.UIImage, actionURL: Foundation.URL? = nil, appData: [Swift.String : Swift.String]? = nil) -> FirebaseInAppMessaging.InAppMessagingImageOnlyDisplay
  @objc @_inheritsConvenienceInitializers public class Delegate : ObjectiveC.NSObject, FirebaseInAppMessaging.InAppMessagingDisplayDelegate {
    @objc override dynamic public init()
    @objc deinit
  }
}
